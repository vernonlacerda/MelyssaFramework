<?php

namespace Melyssa\Logger;

use Melyssa\Exception;
use Melyssa\Bootstrap as System;

class Log
{
    
    private static $instance;
    
    private $logPath;
    
    private $levels = array(1 => 'DEBUG', 2 => 'ERROR', 3 => 'INFO');
    
    private $messages = '';
    
    private $dateFormat = 'd/m/Y - H:i:s';
    
    public function __construct()
    {
        try {
            if (!defined('LOG_PATH')) {
                throw new Exception("Log path not defined ! There´s no way to create logs.");
            } elseif (!is_dir(LOG_PATH)) {
                throw new Exception("Log path defined is not a valid directory, please correct this.");
            } else {
                $this->logPath = LOG_PATH;
            }
        } catch (Exception $e) {
            $e->getError();
        }
        self::$instance =& $this;
    }
    
    public static function &getInstance(){
        if(!is_object(self::$instance)){
            new self;
        }
        return self::$instance;
    }
        
    public function debugMessage($message){
        $this->writeMessage($message, 1);
    }
    
    public function writeMessage($message, $level){
        $this->messages .= $this->levels[$level].' --> '.date($this->dateFormat). ' --> '.$message."\n";
        return true;
    }
    
    private function makeLogHeader()
    {
        // Definindo cabeçalho do Log de erros:
        
        $message  = 'System log generated by Melyssa Framework Version ' . System::MELYSSA_VERSION."\n\n";
        $message .= "There are 3 reasons for log messages (ERROR, DEBUG, INFO) and you can see which reason\n";
        $message .= "was used for every message at the beginning of each line:\n\n";
        
        return $message;
    }

    public function saveLog($override = FALSE) {
        // Definindo o nome do próximo arquivo de log do sistema:
        $logFileName = $this->logPath . 'log-' . date('d-m-Y') . '.txt';
        
        if($override === FALSE AND file_exists($logFileName) AND filesize($logFileName) != 0){
            // Setando permissões para poder abrir o arquivo:
            chmod($logFileName, 0700);
            // Abrindo o arquivo de log para escrever dentro dele:
            $newFile = fopen($logFileName, 'rb');
            $messages = fread($newFile, filesize($logFileName)) . "\n\nNew request\n\n" .  $this->messages . "\n";
            fclose($newFile);
        }elseif($override === TRUE AND file_exists($logFileName)){
            $messages = $this->makeLogHeader() . $this->messages . "\n";
            chmod($logFileName, 0700);
        }else{
            $messages = $this->makeLogHeader() . $this->messages . "\n";
        }
        
        $fileTruncated = fopen($logFileName, "w");
        fwrite($fileTruncated, trim($messages));
        fclose($fileTruncated);
        // Bloqueando o arquivo para não ser editado
        chmod($logFileName, 0400);
    }

}
